--- a/libs/blast/blast-mgr.h
+++ b/libs/blast/blast-mgr.h
@@ -23,7 +23,7 @@
  *
  *  Please cite the author in any work or product based on this material.
  *
- * ===========================================================================
+ * ============================================================================$
  *
  */
 
@@ -40,9 +40,9 @@ extern "C" {
 #endif
 
 #if _DEBUGGING
-#define S STSMSG(9,(""));
+#define TRACE() STSMSG(8,(""))
 #else
-#define S
+#define TRACE() ((void)0)
 #endif
 
 #define RELEASE(type, thing) do { rc_t rc2 = type##Release(thing); \
--- a/libs/blast/reader.c
+++ b/libs/blast/reader.c
@@ -256,7 +256,7 @@ uint32_t _VCursorReadArray(const VCursor *self,
         /* TODO: needs to be verified what row_len is expected
             if (row_len != 1) return eVdbBlastErr; */
 
-        S
+        TRACE();
 
         return rc == 0 ? eVdbBlastNoErr : eVdbBlastErr;
     }
@@ -460,22 +460,22 @@ bool _ReadDescNextRead(ReadDesc *self, VdbBlastStatus *status)
     if (_VdbBlastRunVarReadNum(self->run)) {
         bool found = false;
         if (_ReadDescFindNextRead(self, &found)) {
-            S
+            TRACE();
             return false;
         }
         else if (found) {
             *status = _ReadDescFixReadId(self);
-            S
+            TRACE();
             return true;
         }
         else {
-            S
+            TRACE();
             return false;
         }
     }
     else /* fixed spot descriptor */ {
         if (rd->nBioReads == 0) {
-            S
+            TRACE();
             return false;
         }
 
@@ -484,7 +484,7 @@ bool _ReadDescNextRead(ReadDesc *self, VdbBlastStatus *status)
 
         for (i = self->read + 1; i <= nreads; ++i) {
             if (rd->readType[i - 1] & SRA_READ_TYPE_BIOLOGICAL) {
-                S
+                TRACE();
                 read = i;
                 break;
             }
@@ -492,13 +492,13 @@ bool _ReadDescNextRead(ReadDesc *self, VdbBlastStatus *status)
 
         if (read == 0) {
             if (++self->spot > rd->spotCount) {
-                S
+                TRACE();
                 return false;
             }
 
             for (i = 1; i <= nreads; ++i) {
                 if (rd->readType[i - 1] & SRA_READ_TYPE_BIOLOGICAL) {
-                    S
+                    TRACE();
                     read = i;
                     break;
                 }
@@ -506,14 +506,14 @@ bool _ReadDescNextRead(ReadDesc *self, VdbBlastStatus *status)
         }
 
         if (read > 0) {
-            S
+            TRACE();
             self->read = read;
             ++self->read_id;
             *status = _ReadDescFixReadId(self);
             return true;
         }
         else
-            S
+            TRACE();
 
             return read;
         }
@@ -525,11 +525,11 @@ bool _ReadDescSameRun(const ReadDesc *self)
     assert(self);
 
     if (self->prev == NULL && self->run == NULL) {
-        S
+        TRACE();
         return false;
     }
 
-    S
+    TRACE();
     return self->prev == self->run;
 }
 
@@ -575,7 +575,7 @@ static
 bool _Reader2naEor(const Reader2na *self)
 {
     assert(self);
-    S
+    TRACE();
     return self->eor;
 }
 
@@ -657,12 +657,12 @@ uint32_t _Reader2naGetBlob(Reader2na *self,
 
         if ((int64_t)desc->spot >= *first &&
             desc->spot < *first + *count) {
-            S
+            TRACE();
             return eVdbBlastNoErr;
         }
 
         if (fresh) {
-            S
+            TRACE();
             return eVdbBlastErr;
         }
 
@@ -675,7 +675,7 @@ uint32_t _Reader2naGetBlob(Reader2na *self,
         }
     }
 
-    S
+    TRACE();
     return eVdbBlastErr;
 }
 
@@ -705,10 +705,10 @@ uint32_t _Reader2naCalcReadReaderColsParams(const ReadDesc *desc,
             *start += cols->read_len[i - 1];
         }
     }
-    S
+    TRACE();
 
     if (cols->read_len[desc->read - 1] == 0) {
-        S
+        TRACE();
         DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST),
             ("%s: %s:%d:%d(%d): READ_LEN=0\n",
             __func__, desc->run->path, desc->spot, desc->read, desc->read_id));
@@ -717,7 +717,7 @@ uint32_t _Reader2naCalcReadReaderColsParams(const ReadDesc *desc,
     else if (!ignoreReadFilter
         && cols->read_filter[desc->read - 1] != READ_FILTER_PASS)
     {
-        S
+        TRACE();
         DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST),
             ("%s: %s:%d:%d(%d): READ_FILTER != READ_FILTER_PASS\n",
             __func__, desc->run->path, desc->spot, desc->read, desc->read_id));
@@ -735,7 +735,7 @@ uint32_t _Reader2naCalcReadReaderColsParams(const ReadDesc *desc,
            as are not stored in CMP_READ) */
         if (ReaderColsIsReadCompressed(cols, desc->read - 1)) {
             to_read = 0;
-            S
+            TRACE();
             DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST),
                 ("%s: %s:%d:%d(%d): PRIMARY_ALIGNMENT_ID != 0\n", __func__,
                  desc->run->path, desc->spot, desc->read, desc->read_id));
@@ -764,7 +764,7 @@ uint32_t _Reader2naCalcReadReaderColsParams(const ReadDesc *desc,
                 to_read -= delta;
             }
             if (to_read < min_read_length) {
-                S
+                TRACE();
                 DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST),
                     ("%s: %s:%d:%d(%d): READ_LEN=%d: TOO SHORT (<%d)\n",
                     __func__, desc->run->path, desc->spot, desc->read,
@@ -802,13 +802,13 @@ bool _Reader2naNextData(Reader2na *self,
 
     *status = _Reader2naReadReaderCols(self, &empty);
     if (*status != eVdbBlastNoErr) {
-        S
+        TRACE();
         return false;
     }
     if (empty)
         return true;
     if (!self->curs || !desc->run) {
-        S
+        TRACE();
         *status = eVdbBlastErr;
         return false;
     }
@@ -827,7 +827,7 @@ bool _Reader2naNextData(Reader2na *self,
         uint32_t elem_bits = 0;
         rc_t rc = 0;
 
-        S
+        TRACE();
         DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST),
             ("%s: %s:%ld:%d(%ld): READ_LEN=%d\n", __func__,
             self->desc.run->path, self->desc.spot, self->desc.read,
@@ -851,19 +851,19 @@ bool _Reader2naNextData(Reader2na *self,
         }
 
         if (elem_bits != 2) {
-            S
+            TRACE();
             *status = eVdbBlastErr;
             return false;
         }
 
         if (out->length_in_bases < start) {
-            S
+            TRACE();
             *status = eVdbBlastErr;
             return false;
         }
 
         out->offset_to_first_bit += start * 2;
-        S
+        TRACE();
 
         out->length_in_bases = to_read;
         while (out->offset_to_first_bit >= 8) {
@@ -871,7 +871,7 @@ bool _Reader2naNextData(Reader2na *self,
             out->offset_to_first_bit -= 8;
         }
         out->read_id = desc->read_id;
-        S
+        TRACE();
         return true;
     }
 }
@@ -894,7 +894,7 @@ uint32_t _Reader2naData(Reader2na *self,
     {   status = &dummy; }
     *status = eVdbBlastErr;
     if (buffer_length && buffer == NULL) {
-        S
+        TRACE();
         return 0;
     }
 
@@ -902,7 +902,7 @@ uint32_t _Reader2naData(Reader2na *self,
     desc = &self->desc;
     *status = _Reader2naGetBlob(self, &data->blob, desc, &first, &count);
     if (*status == eVdbBlastErr) {
-        S
+        TRACE();
         return 0;
     }
 
@@ -914,14 +914,14 @@ uint32_t _Reader2naData(Reader2na *self,
             if (ignorable) {
                 /* special case */
                 if (n > 0) { /* let's retry during next call */
-                    S
+                    TRACE();
                     *status = eVdbBlastNoErr;
                 }
                 else
-                {   S }
+                    TRACE();
                 return n;
             }
-            S
+            TRACE();
             return 0;
         }
         if (p->length_in_bases > 0)
@@ -930,12 +930,12 @@ uint32_t _Reader2naData(Reader2na *self,
             if (*status != eVdbBlastNoErr) {
                 return 0;
             }
-            S
+            TRACE();
             self->eor = true;
             break;
         }
         if (desc->spot >= first + count) {
-            S
+            TRACE();
             break;
         }
     }
@@ -972,36 +972,37 @@ uint64_t _Reader2naRead(Reader2na *self,
     *starting_base = self->starting_base;
 
     if (_Reader2naEor(self)) {
-        S
+        TRACE();
         *status = eVdbBlastNoErr;
         return 0;
     }
 
     *status = _Reader2naReadReaderCols(self, &empty);
     if (*status != eVdbBlastNoErr) {
-        S
+        TRACE();
         return 0;
     }
 
     if (!empty) {
         *status = eVdbBlastErr;
         if (!self->curs || !desc->run) {
-            S
+            TRACE();
             return 0;
         }
 
         assert(desc->run->path);
 
         *status = eVdbBlastNoErr;
-        if (!_VdbBlastRunVarReadNum(desc->run) && desc->run->rd.nBioReads == 0) {
-            S
+        if (!_VdbBlastRunVarReadNum(desc->run) && desc->run->rd.nBioReads == 0)
+        {
+            TRACE();
             return 0;
         }
 
         to_read = _Reader2naCalcReadReaderColsParams(&self->desc, &self->cols,
             &start, min_read_length, ignoreReadFilter);
         if (to_read <= self->starting_base) {
-            S
+            TRACE();
             DBGMSG(DBG_BLAST, DBG_FLAG(DBG_BLAST_BLAST), (
                 "%s: %s:%d:%d(%d): READ_LEN=%d: TOO SHORT (starting_base=%d)\n",
                 __func__, desc->run->path, desc->spot, desc->read,
@@ -1016,14 +1017,14 @@ uint64_t _Reader2naRead(Reader2na *self,
     }
 
     if (to_read > 0) {
-        S
+        TRACE();
         rc = VCursorReadBitsDirect(self->curs, desc->spot, self->col_READ, 2,
             start, buffer, 0, (uint32_t)buffer_size * 4, &num_read, &remaining);
         if (rc) {
             if (rc == SILENT_RC
                 (rcVDB, rcCursor, rcReading, rcBuffer, rcInsufficient))
             {
-                S
+                TRACE();
                 rc = 0;
                 num_read = (uint32_t)buffer_size * 4;
             }
@@ -1038,7 +1039,7 @@ uint64_t _Reader2naRead(Reader2na *self,
         }
         *status
             = (num_read == 0 && remaining == 0) ? eVdbBlastErr : eVdbBlastNoErr;
-        S
+        TRACE();
     }
 
     if (num_read >= to_read) {
@@ -1046,11 +1047,11 @@ uint64_t _Reader2naRead(Reader2na *self,
         num_read = to_read;
         if (!_ReadDescNextRead(desc, status))
         {   self->eor = true; }
-        S
+        TRACE();
     }
     else {
         self->starting_base += num_read;
-        S
+        TRACE();
     }
 
     return num_read;
@@ -1143,12 +1144,12 @@ uint32_t _Core2naOpen1stRun(Core2na *self,
                 status = _Reader2naOpenCursor(reader);
                 if (status != eVdbBlastNoErr) {
                     bool keep = true;
-                    S
+                    TRACE();
                     _Reader2naReset(reader, &keep, &status);
                 }
             }
             else
-            {   S }
+                TRACE();
         }
         else if (reader->refs == NULL) {
             reader->refs = _RunSetMakeReferences(runs, &status);
@@ -1158,7 +1159,7 @@ uint32_t _Core2naOpen1stRun(Core2na *self,
         }
     }
     else {
-        S
+        TRACE();
         self->eos = true;
     }
 
@@ -1188,7 +1189,7 @@ static VdbBlastStatus _Core2naOpenNextRunOrTbl
 
     if (!keep) {
         if (core->irun >= runs->krun - 1) { /* No more runs to read */
-            S
+            TRACE();
             core->eos = true;
             return eVdbBlastNoErr;
         }
@@ -1200,13 +1201,13 @@ static VdbBlastStatus _Core2naOpenNextRunOrTbl
 
         VdbBlastRun *run = &runs->run[core->irun];
         if (run == NULL) {
-            S
+            TRACE();
             return eVdbBlastErr;
         }
 
         status = _VdbBlastRunFillReadDesc(run, 0, desc);
         if (status != eVdbBlastNoErr) {
-            S
+            TRACE();
             return status;
         }
 
@@ -1217,16 +1218,16 @@ static VdbBlastStatus _Core2naOpenNextRunOrTbl
         }
         status = _Reader2naOpenCursor(reader);
         if (status == eVdbBlastNoErr) {
-            S
+            TRACE();
         }
         else {
-            S
+            TRACE();
         }
 
         return status;
     }
 
-    S
+    TRACE();
     return eVdbBlastNoErr;
 }
 
@@ -1247,12 +1248,12 @@ uint32_t _Core2naDataSeq(Core2na *self,
 
     while (*status == eVdbBlastNoErr && num_read == 0) {
         if (_Reader2naEor(&self->reader) || data->irun != self->irun) {
-            S
+            TRACE();
             VBlobRelease(data->blob);
             data->blob = NULL;
         }
         if (_Reader2naEor(&self->reader)) {
-            S
+            TRACE();
             *status = _Core2naOpenNextRunOrTbl(self, runs);
             if (*status != eVdbBlastNoErr) {
                 STSMSG(1, ("Error: "
@@ -1317,7 +1318,7 @@ uint64_t _Core2naReadSeq(Core2na *self,
     assert(self && status && runs);
 
     if (buffer_size == 0) {
-        S
+        TRACE();
         *status = eVdbBlastErr;
         return 0;
     }
@@ -1326,22 +1327,22 @@ uint64_t _Core2naReadSeq(Core2na *self,
 
     while (*status == eVdbBlastNoErr && num_read == 0) {
         if (_Reader2naEor(&self->reader)) {
-            S
+            TRACE();
             *status = _Core2naOpenNextRunOrTbl(self, runs);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
         }
 
         if (self->eos) {
-            S
+            TRACE();
             return 0;
         }
 
         num_read = _Reader2naRead(&self->reader, status, read_id, starting_base,
             buffer, buffer_size, self->min_read_length, ignoreReadFilter);
-        S
+        TRACE();
     }
 
     return num_read;
@@ -1384,12 +1385,12 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
 
     *status = _RunSetFindReadDesc(runs, read_id, desc);
     if (*status != eVdbBlastNoErr) {
-        S
+        TRACE();
     }
     else {
         rc_t rc = 0;
         if (!_ReadDescSameRun(desc)) {
-            S
+            TRACE();
             ReaderColsReset(&self->cols);
             VCursorRelease(self->curs);
             ((Core4na*)self)->curs = NULL;
@@ -1397,7 +1398,7 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
             *status = _VdbBlastRunMakeReaderColsCursor(desc->run,
                 &((Core4na*)self)->curs, &((Core4na*)self)->col_READ, false,
                 &(((Core4na*)self)->cols), desc);
-            S
+            TRACE();
         }
 
         if (*status == eVdbBlastNoErr && rc == 0) {
@@ -1421,7 +1422,7 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
                     then this read is skipped by 2na reader (usually filtered)
                     and should not be accessed by 4na reader */
                     *status = eVdbBlastInvalidId;
-                    S
+                    TRACE();
                 }
                 else {
                     if (to_read >= starting_base) {
@@ -1430,7 +1431,7 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
                         if (buffer_length < to_read) {
                             to_read = (uint32_t)buffer_length;
                         }
-                        S
+                        TRACE();
                         rc = VCursorReadBitsDirect(self->curs,
                             desc->spot, self->col_READ, 8,
                             start, buffer, 0, to_read, &num_read, &remaining);
@@ -1443,7 +1444,7 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
                         }
                     }
                     else {
-                        S
+                        TRACE();
                         *status = eVdbBlastErr;
                     }
                 }
@@ -1454,7 +1455,7 @@ static size_t _Core4naReadSeq(Core4na *self, const RunSet *runs,
         {   *status = rc ? eVdbBlastErr : eVdbBlastNoErr; }
     }
 
-    S
+    TRACE();
     return num_read;
 }
 
@@ -1486,25 +1487,25 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
 
     *status = _RunSetFindReadDesc(runs, read_id, desc);
     if (*status != eVdbBlastNoErr)
-    {   S }
+        TRACE();
     else {
         rc_t rc = 0;
         bool empty = false;
         const uint8_t *base = NULL;
         if (!_ReadDescSameRun(desc)) {
-            S
+            TRACE();
             ReaderColsReset(&self->cols);
             VCursorRelease(self->curs);
             self->curs = NULL;
             assert(desc->run && desc->run->obj);
             *status = _VdbBlastRunMakeReaderColsCursor(desc->run, &self->curs,
                 &self->col_READ, false, &self->cols, desc);
-            S
+            TRACE();
         }
 
         if (*status == eVdbBlastNoErr) {
             *status = _VCursorReadReaderCols(self->curs, desc, &self->cols, &empty);
-            S
+            TRACE();
         }
 
         if (rc == 0 && *status == eVdbBlastNoErr) {
@@ -1523,13 +1524,13 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
             {   /* FILTERed reads are not returned by 2na reader:
                    4na readed should not ask for them */
                 *status = eVdbBlastInvalidId;
-                S
+                TRACE();
             }
             else if (ReaderColsIsReadCompressed(&self->cols, desc->read - 1)) {
                 /* Compressed CMP_READs are not returned by 2na reader:
                    4na readed should not ask for them */
                 *status = eVdbBlastInvalidId; /*  */
-                S
+                TRACE();
             }
             else {
                 if (self->blob) {
@@ -1562,7 +1563,7 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
                     }
                     else {
                         if (elem_bits != 8) {
-                            S
+                            TRACE();
                             *status = eVdbBlastErr;
                             base = NULL;
                         }
@@ -1573,7 +1574,7 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
                             if (to_read < self->min_read_length) {
                         /* Read with read_len < min is not returned by 2naReader
                            - it should not be accessed by 4na reader */
-                                S
+                                TRACE();
                                 * status = eVdbBlastInvalidId;
                                 base = NULL;
                             }
@@ -1586,11 +1587,11 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
                                 if (row_len >= start) {
                                     row_len -= start;
                                     if (to_read > row_len) {
-                                        S
+                                        TRACE();
                                         *status = eVdbBlastErr;
                                     }
                                     else {
-                                        S
+                                        TRACE();
                                         *length = to_read;
                                         if (to_read > 0)
                                             *status = eVdbBlastNoErr;
@@ -1604,7 +1605,7 @@ static const uint8_t* _Core4naDataSeq(Core4na *self, const RunSet *runs,
                                     }
                                 }
                                 else {
-                                    S
+                                    TRACE();
                                     *status = eVdbBlastErr;
                                 }
                             }
@@ -1906,7 +1907,7 @@ uint32_t CC VdbBlast2naReaderData(VdbBlast2naReader *self,
     if (rc == 0) {
         n = _Core2naData((Core2na*)core2na, &self->data, &self->set->runs,
             status, buffer, buffer_length, self->set->ignoreReadFilter);
-        S
+        TRACE();
         if (n > 0 && verbose)
         {   _Packed2naReadPrint(buffer, self->data.blob); }
         if (0 && verbose) {
@@ -1924,7 +1925,7 @@ uint32_t CC VdbBlast2naReaderData(VdbBlast2naReader *self,
     if (rc)
     {   *status = eVdbBlastErr; }
 
-    S
+    TRACE();
     return n;
 }
 
@@ -2050,7 +2051,7 @@ size_t CC VdbBlast4naReaderRead(const VdbBlast4naReader *self,
     {   status = &dummy; }
 
     if (self == NULL) {
-        S
+        TRACE();
         *status = eVdbBlastErr;
         return 0;
     }
--- a/libs/blast/reference.c
+++ b/libs/blast/reference.c
@@ -20,7 +20,7 @@
  *
  *  Please cite the author in any work or product based on this material.
  *
- * ===========================================================================
+ * ============================================================================$
  *
  */
 
@@ -61,7 +61,7 @@ uint64_t _clear_read_id_reference_bit(uint64_t read_id, bool *bad)
 
     if (! _is_set_read_id_reference_bit(read_id)) {
         *bad = true;
-        S
+        TRACE();
         return read_id;
     }
 
@@ -75,7 +75,7 @@ static uint64_t _set_read_id_reference_bit
 
     if (_is_set_read_id_reference_bit(read_id)) {
         *status = eVdbBlastErr;
-        S
+        TRACE();
         return read_id;
     }
 
@@ -752,7 +752,7 @@ static uint64_t _ReferencesRead2na(References *self,
             if (self->rfdi != self->read_id) {/* switching to a next reference*/
                 if (self->rfdi + 1 != self->read_id) { /* should never happen */
                     *status = eVdbBlastErr;
-                    S
+                    TRACE();
                     return 0;
                 }
                 *starting_base = 0;
@@ -760,20 +760,20 @@ static uint64_t _ReferencesRead2na(References *self,
                 if (self->rfdi >= self->refs->rfdk) {
                     self->eos = true;
                     *status = eVdbBlastNoErr; /* end of set */
-                    S
+                    TRACE();
                     return 0;
                 }
                 rfd1 = rfd;
                 rfd = &self->refs->rfd[self->rfdi];
             }
             if (rfd->iRun >= self->rs->krun) {
-                S
+                TRACE();
                 return 0;
             }
             if (self->rs->run == NULL || self->rs->run[rfd->iRun].obj == NULL ||
                 self->rs->run[rfd->iRun].obj->refTbl == NULL)
             {
-                S
+                TRACE();
                 return 0;
             }
             if (self->rfdi == 0 || rfd1->iRun != rfd->iRun) {
@@ -806,7 +806,7 @@ static uint64_t _ReferencesRead2na(References *self,
             else {
                 if (self->curs == NULL || self->idxREAD == 0) {
                     *status = eVdbBlastErr;
-                    S /* should never happen */
+                    TRACE(); /* should never happen */
                     return 0;
                 }
             }
@@ -829,10 +829,10 @@ static uint64_t _ReferencesRead2na(References *self,
             if (rc == SILENT_RC
                 (rcVDB, rcCursor, rcReading, rcBuffer, rcInsufficient))
             {
-                S
+                TRACE();
                 if (num_read == 0) {
                     *status = eVdbBlastErr;
-                    S /* should never happen */
+                    TRACE(); /* should never happen */
                 }
                 else {
                     rc = 0;
@@ -851,7 +851,7 @@ static uint64_t _ReferencesRead2na(References *self,
         }
         else {
             if (remaining != 0) { /* The buffer is filled. */
-                S     /* There remains more data to read in the current spot. */
+                TRACE(); // There remains more data to read in the current spot.
                 *starting_base += num_read;
                 break;
             }
@@ -872,7 +872,7 @@ static uint64_t _ReferencesRead2na(References *self,
             }
             begin += num_read / 4;
             if ((num_read % 4) != 0) {
-                S
+                TRACE();
                 *status = eVdbBlastErr;
                 break; /* should never happen */
             }
@@ -920,27 +920,27 @@ static uint32_t _ReferencesData2na(References *self,
             const VTable *t = NULL;
             if (self->rfdi != self->read_id) {/* switching to a next reference*/
                 if (self->rfdi + 1 != self->read_id) { /* should never happen */
-                    S
+                    TRACE();
                     return 0;
                 }
                 ++self->rfdi;
                 if (self->rfdi >= self->refs->rfdk) {
                     self->eos = true;
                     *status = eVdbBlastNoErr; /* end of set */
-                    S
+                    TRACE();
                     return num_read;
                 }
                 rfd1 = rfd;
                 rfd = &self->refs->rfd[self->rfdi];
             }
             if (rfd->iRun >= self->rs->krun) {
-                S
+                TRACE();
                 return 0;
             }
             if (self->rs->run == NULL || self->rs->run[rfd->iRun].obj == NULL ||
                 self->rs->run[rfd->iRun].obj->refTbl == NULL)
             {
-                S
+                TRACE();
                 return 0;
             }
             if (self->rfdi == 0 || rfd1->iRun != rfd->iRun) {
@@ -972,7 +972,7 @@ static uint32_t _ReferencesData2na(References *self,
             }
             else {
                 if (self->curs == NULL || self->idxREAD == 0) {
-                    S /* should never happen */
+                    TRACE(); /* should never happen */
                     return 0;
                 }
             }
@@ -991,7 +991,7 @@ static uint32_t _ReferencesData2na(References *self,
             return 0;
         }
         if (data->blob == NULL) {
-            S
+            TRACE();
             return 0;
         }
         rc = VBlobIdRange(data->blob, &first, &count);
@@ -1004,11 +1004,11 @@ static uint32_t _ReferencesData2na(References *self,
         if (self->spot < first || self->spot >= first + count) {
             /* requested blob b(spot) but spot < b.first || spot > b.last:
                should never happen */
-            S /* PLOGERR */
+            TRACE(); /* PLOGERR */
             return 0;
         }
         if (first > rfd->first + rfd->count) { /* should never happen */
-            S /* PLOGERR */
+            TRACE(); /* PLOGERR */
             return 0;
         }
         last_spot = first + count;
@@ -1386,7 +1386,7 @@ size_t _Core4naReadRef(Core4na *self, const RunSet *runs,
         uint32_t remaining = 0;
         uint32_t to_read = (uint32_t)(buffer_length - total);
         if (to_read == 0) {
-            S
+            TRACE();
             break;
         }
         rc = VCursorReadBitsDirect(self->curs, spot, self->col_READ,
@@ -1516,7 +1516,7 @@ const uint8_t* _Core4naDataRef(Core4na *self, const RunSet *runs,
         return 0;
     }
     if (self->blob == NULL) {
-        S
+        TRACE();
         return 0;
     }
     rc = VBlobIdRange(self->blob, &first, &count);
@@ -1529,11 +1529,11 @@ const uint8_t* _Core4naDataRef(Core4na *self, const RunSet *runs,
     if (self->desc.spot < first || self->desc.spot >= first + count) {
         /* requested blob b(spot) but spot < b.first || spot > b.last:
            should never happen */
-        S /* PLOGERR */
+        TRACE(); /* PLOGERR */
         return 0;
     }
     if (first > rfd->first + rfd->count) { /* should never happen */
-        S /* PLOGERR */
+        TRACE(); /* PLOGERR */
         return 0;
     }
     last_spot = first + count;
--- a/libs/blast/run-set.c
+++ b/libs/blast/run-set.c
@@ -20,7 +20,7 @@
  *
  *  Please cite the author in any work or product based on this material.
  *
- * ===========================================================================
+ * ============================================================================$
  *
  */
 
@@ -1119,7 +1119,7 @@ static uint32_t Bits(uint64_t n, EReadIdType idType) {
             return eVdbBlastErr;
         }
         else {
-            S
+            TRACE();
             return eVdbBlastNoErr;
         }
     }
@@ -1137,12 +1137,12 @@ static uint32_t Bits(uint64_t n, EReadIdType idType) {
     rd->spotBits = Bits(rd->spotCount, rd->readIdDesc.idType);
 
     if (self->type == btpWGS) {
-        S
+        TRACE();
         status = eVdbBlastNoErr;
         rd->nReads = rd->spotCount > 0 ? 1 : 0;
     }
     else if (self->type == btpREFSEQ) {
-        S
+        TRACE();
         status = eVdbBlastNoErr;
         rd->nReads = 1;
     }
@@ -1295,7 +1295,7 @@ static uint32_t Bits(uint64_t n, EReadIdType idType) {
     }
     else {
         for (rd->nBioReads = 0, i = 0; i < rd->nReads; ++i) {
-            S
+            TRACE();
             if (rd->readType[i] & SRA_READ_TYPE_BIOLOGICAL) {
                 if ((rd->rdFilterStatic == eColTypeStatic &&
                      rd->rdFilter[i] == READ_FILTER_PASS) 
@@ -1310,7 +1310,7 @@ static uint32_t Bits(uint64_t n, EReadIdType idType) {
             }
         }
     }
-    S /* LOG nBioReads */
+    TRACE(); /* LOG nBioReads */
 
     return status;
 }
@@ -1342,7 +1342,7 @@ uint64_t _VdbBlastRunGetNumSequences(VdbBlastRun *self,
         RunDesc *rd = NULL;
 
         if (self->type == btpREFSEQ) {
-            S
+            TRACE();
             self->bioReads = 1;
         }
         else if (_VdbBlastRunVarReadNum(self)) {
@@ -1361,7 +1361,7 @@ uint64_t _VdbBlastRunGetNumSequences(VdbBlastRun *self,
         else {
             *status = _VdbBlastRunFillRunDesc(self);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
 
@@ -1377,16 +1377,16 @@ uint64_t _VdbBlastRunGetNumSequences(VdbBlastRun *self,
 
             if (_VdbBlastRunVarReadNum(self)) {
                 self->bioReads = 0;
-                S
+                TRACE();
             }
             else {
                 self->bioReads = rd->spotCount * rd->nBioReads;
-                S
+                TRACE();
             }
         }
     }
     else {
-        S
+        TRACE();
     }
 
     if (*status == eVdbBlastNoErr && self->bioReadsTooExpensive) {
@@ -1425,24 +1425,24 @@ static uint64_t _VdbBlastSraRunGetLengthApprox(VdbBlastRun *self,
             RunDesc *rd = NULL;
             *status = _VdbBlastRunFillRunDesc(self);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
 
             rd = &self->rd;
             if (rd->nReads == 0) {
-                S
+                TRACE();
                 self->bioBasesApprox = 0;
             }
             else if (rd->varReadLen) {
-                S
+                TRACE();
                 self->bioBasesApprox
                     = _VdbBlastRunCountBioBaseCount(self, status);
             }
             else /* fixed spot descriptor */ {
                 if (self->type == btpREFSEQ) {
                     if (rd->bioBaseCount == ~0) {
-                        S
+                        TRACE();
                         *status = eVdbBlastErr;
                     }
                     else {
@@ -1451,7 +1451,7 @@ static uint64_t _VdbBlastSraRunGetLengthApprox(VdbBlastRun *self,
                 }
                 else {
                     uint8_t read = 0;
-                    S
+                    TRACE();
                     for (read = 0, self->bioBasesApprox = 0;
                         read < rd->nReads; ++read)
                     {
@@ -1482,7 +1482,7 @@ static uint64_t _VdbBlastRunGetNumSequencesApprox(VdbBlastRun *self,
             self->bioReadsApprox = self->bioReads;
         }
         else if (self->type == btpREFSEQ) {
-            S
+            TRACE();
             self->bioReadsApprox = 1;
         }
         else if (self->cSra) {
@@ -1494,7 +1494,7 @@ static uint64_t _VdbBlastRunGetNumSequencesApprox(VdbBlastRun *self,
 
             *status = _VdbBlastRunFillRunDesc(self);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
 
@@ -1502,7 +1502,7 @@ static uint64_t _VdbBlastRunGetNumSequencesApprox(VdbBlastRun *self,
 
             n = _VdbBlastSraRunGetLengthApprox(self, status);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
             r = rd->cmpBaseCount * rd->spotCount * rd->nBioReads;
@@ -1516,14 +1516,14 @@ static uint64_t _VdbBlastRunGetNumSequencesApprox(VdbBlastRun *self,
         else {
             *status = _VdbBlastRunFillRunDesc(self);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
 
             rd = &self->rd;
 
             self->bioReadsApprox = rd->spotCount * rd->nBioReads;
-            S
+            TRACE();
         }
     }
 
@@ -1547,7 +1547,7 @@ static uint64_t _VdbBlastRunGetLength
         if (self->cSra) {
             *status = _VdbBlastRunFillRunDesc(self);
             if (*status != eVdbBlastNoErr) {
-                S
+                TRACE();
                 return 0;
             }
             self->bioBases = self->rd.cmpBaseCount;
@@ -1564,11 +1564,11 @@ static uint64_t _VdbBlastRunGetLength
     }
 
     if (*status == eVdbBlastNoErr) {
-        S
+        TRACE();
         return self->bioBases;
     }
     else {
-        S
+        TRACE();
         return 0;
     }
 }
@@ -1800,7 +1800,7 @@ VdbBlastStatus _VdbBlastRunFillReadDesc(VdbBlastRun *self,
     int bioIdx = 0;
 
     if (self == NULL || desc == NULL) {
-        S
+        TRACE();
         return eVdbBlastErr;
     }
 
@@ -1830,7 +1830,7 @@ VdbBlastStatus _VdbBlastRunFillReadDesc(VdbBlastRun *self,
                 for (i = 0; i < rd->nReads; ++i) {
                     if (rd->readType[i] & SRA_READ_TYPE_BIOLOGICAL) {
                         if (bioIdx++ == idInSpot) {
-                            S
+                            TRACE();
                             desc->tableId = VDB_READ_UNALIGNED;
                             desc->read = i + 1;
                             desc->read_id = _RunDescMakeReadId(rd,
@@ -1839,11 +1839,11 @@ VdbBlastStatus _VdbBlastRunFillReadDesc(VdbBlastRun *self,
                         }
                     }
                 }
-                S
+                TRACE();
             }
             else {
                 uint64_t alignments = 0;
-                S
+                TRACE();
                 desc->spot -= rd->spotCount;
                 alignments = _VdbBlastRunGetNumAlignments(self, &status);
                 if (status != eVdbBlastNoErr) {
@@ -1854,7 +1854,7 @@ VdbBlastStatus _VdbBlastRunFillReadDesc(VdbBlastRun *self,
                     desc->read = 1;
                     return eVdbBlastNoErr;
                 }
-                S
+                TRACE();
             }
         }
         else {
@@ -1879,15 +1879,15 @@ VdbBlastStatus _VdbBlastRunFillReadDesc(VdbBlastRun *self,
                     (self->obj, desc->spot, &desc->nReads, self->acc);
                 if (rc == 0) {
                     desc->tableId = VDB_READ_UNALIGNED;
-                    S
+                    TRACE();
                     return eVdbBlastNoErr;
                 }
                 else {
-                    S
+                    TRACE();
                 }
             }
             else {
-                S
+                TRACE();
             }
         }
     }
@@ -1967,7 +1967,7 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
     assert(memcmp(self->acc, acc, string_measure(self->acc, &size)) == 0);
 
     if ((spot <= 0 && read > 0) || (spot > 0 && read <= 0)) {
-        S
+        TRACE();
         return eVdbBlastErr;
     }
 
@@ -1983,11 +1983,11 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
                 if (status != eVdbBlastNoErr)
                 {   return status; }
                 if (desc.spot < spot) {
-                    S
+                    TRACE();
                     return eVdbBlastErr;
                 }
                 if (desc.spot > spot) {
-                    S
+                    TRACE();
                     return eVdbBlastErr;
                 }
                 if (desc.read == read) {
@@ -1995,7 +1995,7 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
                     return eVdbBlastNoErr;
                 }
             }
-            S
+            TRACE();
             return eVdbBlastErr;
         }
         else if (self->rd.readIdDesc.idType == eFactor10) {
@@ -2005,20 +2005,20 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
                 }
                 else {
                     if (read > self->rd.nReads) {
-                        S
+                        TRACE();
                         return eVdbBlastErr;
                     }
                     else {
                         /* TODO how to check it when READ_TYPE is variable
                                 withing a run (is it possible?) */
                         if (read == 0) {
-                            S
+                            TRACE();
                             return eVdbBlastErr;
                         }
                         if (! (self->rd.readType[read - 1]
                                 & SRA_READ_TYPE_BIOLOGICAL))
                         {
-                            S
+                            TRACE();
                             return eVdbBlastErr;
                         }
                     }
@@ -2028,7 +2028,7 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
                 return status;
             }
             else {
-                S
+                TRACE();
                 return eVdbBlastErr;
             }
         }
@@ -2059,14 +2059,14 @@ static VdbBlastStatus _VdbBlastRunGetReadId(VdbBlastRun *self, const char *acc,
 #define SZ 4096
                 char name_buffer[SZ + 1];
                 if (string_measure(acc, &size) > SZ) {
-                    S
+                    TRACE();
                     return eVdbBlastErr;
                 }
 #undef SZ
                 status = _VdbBlastRunGetWgsAccession(
                     self, i + 1, name_buffer, sizeof name_buffer, &need);
                 if (need > sizeof name_buffer) {
-                    S
+                    TRACE();
                     return eVdbBlastErr;
                 }
                 if (strcmp(name_buffer, acc) == 0) {
@@ -2142,7 +2142,7 @@ static VdbBlastStatus _RunSetAllocTbl(RunSet *self) {
         self->run = calloc(nmemb, sizeof *self->run);
         if (self->run == NULL)
         {   return eVdbBlastMemErr; }
-        S
+        TRACE();
     }
     else {
         void *p = NULL;
@@ -2151,7 +2151,7 @@ static VdbBlastStatus _RunSetAllocTbl(RunSet *self) {
         if (p == NULL)
         {   return eVdbBlastMemErr; }
         self->run = p;
-        S
+        TRACE();
     }
 
     self->nrun = nmemb;
@@ -2329,13 +2329,13 @@ static size_t _RunSetGetName(const RunSet *self,
             need += string_measure(run->acc, &size);
         }
         else {
-            S
+            TRACE();
             return 0;
         }
     }
 
     if (name_buffer == NULL || bsize == 0) {
-        S
+        TRACE();
         return need;
     }
 
@@ -2345,14 +2345,14 @@ static size_t _RunSetGetName(const RunSet *self,
             if (i)
             {   name_buffer[idx++] = '|'; }
             if (idx >= bsize) {
-                S
+                TRACE();
                 return need;
             }
             string_copy(name_buffer + idx, bsize - idx,
                 run->acc, string_size(run->acc));
             idx += string_measure(run->acc, &size);
             if (idx >= bsize) {
-                S
+                TRACE();
                 return need;
             }
         }
@@ -2360,7 +2360,7 @@ static size_t _RunSetGetName(const RunSet *self,
     name_buffer[idx++] = '\0';
     *status = eVdbBlastNoErr;
 
-    S
+    TRACE();
     return need;
 }
 
@@ -2382,13 +2382,13 @@ static VdbBlastStatus _RunSetFindReadDescContinuous(
         uint64_t l = 0;
 
         if (prev > 0 && i < prev) {
-            S
+            TRACE();
             return eVdbBlastErr;
         }
 
         run = &self->run[i];
         if (run == NULL) {
-            S
+            TRACE();
             return eVdbBlastErr;
         }
 
@@ -2396,7 +2396,7 @@ static VdbBlastStatus _RunSetFindReadDescContinuous(
         if (status != eVdbBlastNoErr &&
             status != eVdbBlastTooExpensive)
         {
-            S
+            TRACE();
             return status;
         }
 
@@ -2407,11 +2407,11 @@ static VdbBlastStatus _RunSetFindReadDescContinuous(
             uint64_t a_read_id = read_id - crnt;
             status = _VdbBlastRunFillReadDesc(run, a_read_id, desc);
             if (status == eVdbBlastNoErr) {
-                S
+                TRACE();
                 desc->read_id = read_id;
             }
             else
-            {   S }
+                TRACE();
 
             return status;
         }
@@ -2419,7 +2419,7 @@ static VdbBlastStatus _RunSetFindReadDescContinuous(
         prev = i;
     }
 
-    S
+    TRACE();
     return eVdbBlastErr;
 }
 
@@ -2441,7 +2441,7 @@ static VdbBlastStatus _RunSetFindReadDescFactor10(
     }
 
     if (i >= self->krun) {
-        S
+        TRACE();
         return eVdbBlastErr;
     }
 
@@ -2449,11 +2449,11 @@ static VdbBlastStatus _RunSetFindReadDescFactor10(
 
     status = _VdbBlastRunFillReadDesc(run, read_id, desc);
     if (status == eVdbBlastNoErr) {
-        S
+        TRACE();
         desc->read_id = read_id;
     }
     else
-    {   S }
+        TRACE();
 
     return status;
 }
@@ -2462,7 +2462,7 @@ VdbBlastStatus _RunSetFindReadDesc(const RunSet *self,
     uint64_t read_id, ReadDesc *desc)
 {
     if (self == NULL || desc == NULL || self->krun == 0) {
-        S
+        TRACE();
         return eVdbBlastErr;
     }
 
@@ -2625,7 +2625,7 @@ VdbBlastStatus CC VdbBlastRunSetAddRun(VdbBlastRunSet *self,
 
     VdbBlastDb *obj = NULL;
     if (self == NULL || self->mgr == NULL || self->beingRead) {
-        S
+        TRACE();
         return eVdbBlastErr;
     }
 
@@ -2636,26 +2636,26 @@ VdbBlastStatus CC VdbBlastRunSetAddRun(VdbBlastRunSet *self,
 
     rc = _VdbBlastMgrNativeToPosix(self->mgr, native, rundesc, sizeof rundesc);
     if (rc != 0) {
-        S
+        TRACE();
         status = eVdbBlastErr;
     }
 
     status = _VdbBlastMgrFindNOpenSeqTable(self->mgr,
         rundesc, &obj->seqTbl, &type, &fullpath, &obj->db);
     if (status != eVdbBlastNoErr) {
-        S
+        TRACE();
         PLOGMSG(klogInfo,
             (klogInfo, "failed to open $(rundesc)", "rundesc=%s", rundesc));
     }
     else {
-        S
+        TRACE();
         PLOGMSG(klogInfo,
             (klogInfo, "opened $(rundesc)", "rundesc=%s", rundesc));
     }
 
     if (status == eVdbBlastNoErr && _VTableCSra(obj->seqTbl)) {
         if (obj->db == NULL) {
-            S
+            TRACE();
             status = eVdbBlastErr;
         }
         else {
@@ -2673,13 +2673,13 @@ VdbBlastStatus CC VdbBlastRunSetAddRun(VdbBlastRunSet *self,
 /* Don't fail on unrecognized platform: treat it as worst case scenario.
  * _VarReadNum will issue a warning. */
         if (false && unrecognized) {
-            S
+            TRACE();
             return eVdbBlastNotImplemented;
         }
 
         status = _RunSetAddObj(&self->runs, obj, rundesc, type,
             NULL, fullpath, self->core2na.min_read_length);
-        S
+        TRACE();
     }
 
     return status;
@@ -2805,7 +2805,7 @@ uint64_t CC VdbBlastRunSetGetMinSeqLen(const VdbBlastRunSet *self)
             if (run->type == btpREFSEQ) {
                 uint64_t cand = _VdbBlastRunGetLengthApprox(run, &status);
                 if (status != eVdbBlastNoErr) {
-                    S
+                    TRACE();
                     return ~0;
                 }
                 if (cand < res && cand >= self->core2na.min_read_length) {
@@ -2815,7 +2815,7 @@ uint64_t CC VdbBlastRunSetGetMinSeqLen(const VdbBlastRunSet *self)
             else {
                 status = _VdbBlastRunFillRunDesc(run);
                 if (status != eVdbBlastNoErr) {
-                    S
+                    TRACE();
                     return ~0;
                 }
                 if (!run->rd.varReadLen) {
@@ -2844,7 +2844,7 @@ uint64_t CC VdbBlastRunSetGetMinSeqLen(const VdbBlastRunSet *self)
                     res = _VdbBlastRunScan(
                         run, Min, self->core2na.min_read_length, res, &status);
                     if (status != eVdbBlastNoErr) {
-                        S
+                        TRACE();
                         return ~0;
                     }
                 }
@@ -2872,7 +2872,7 @@ uint64_t CC VdbBlastRunSetGetMaxSeqLen(const VdbBlastRunSet *self)
             if (run->type == btpREFSEQ) {
                 uint64_t cand = _VdbBlastRunGetLengthApprox(run, &status);
                 if (status != eVdbBlastNoErr) {
-                    S
+                    TRACE();
                     return ~0;
                 }
                 if (cand > res) {
@@ -2882,7 +2882,7 @@ uint64_t CC VdbBlastRunSetGetMaxSeqLen(const VdbBlastRunSet *self)
             else {
                 status = _VdbBlastRunFillRunDesc(run);
                 if (status != eVdbBlastNoErr) {
-                    S
+                    TRACE();
                     return ~0;
                 }
                 if (!run->rd.varReadLen) {
@@ -2900,7 +2900,7 @@ uint64_t CC VdbBlastRunSetGetMaxSeqLen(const VdbBlastRunSet *self)
                     res = _VdbBlastRunScan(
                         run, Max, -1, res, &status);
                     if (status != eVdbBlastNoErr) {
-                        S
+                        TRACE();
                         return ~0;
                     }
                 }
@@ -3024,14 +3024,14 @@ size_t CC VdbBlastRunSetGetReadName(const VdbBlastRunSet *self,
     else if (desc.run->type == btpREFSEQ) {
         rc = string_printf(name_buffer, bsize, &num_writ, "%s", desc.run->acc);
         if (rc == 0) {
-            S
+            TRACE();
             need = num_writ;
         }
         else if (GetRCObject(rc) == (enum RCObject)rcBuffer
             && GetRCState(rc) == rcInsufficient)
         {
             size_t size;
-            S
+            TRACE();
             need = string_measure(desc.run->acc, &size) + 1;
         }
     }
@@ -3039,7 +3039,7 @@ size_t CC VdbBlastRunSetGetReadName(const VdbBlastRunSet *self,
         rc = string_printf(name_buffer, bsize, &num_writ,
             "%s.%lu.%u", desc.run->acc, desc.spot, desc.read);
         if (rc == 0) {
-            S
+            TRACE();
             need = num_writ;
         }
         else if (GetRCObject(rc) == (enum RCObject)rcBuffer
@@ -3047,7 +3047,7 @@ size_t CC VdbBlastRunSetGetReadName(const VdbBlastRunSet *self,
         {
             int i = 0;
             size_t size;
-            S
+            TRACE();
             need = string_measure(desc.run->acc, &size) + 2;
             i = desc.spot;
             while (i > 0) {
@@ -3105,7 +3105,7 @@ LIB_EXPORT uint32_t CC VdbBlastRunSetGetReadId(const VdbBlastRunSet *self,
                 while (++dot1 < dot2) {
                     char c = *dot1;
                     if (c < '0' || c > '9') {
-                        S
+                        TRACE();
                         status = eVdbBlastErr;
                         break;
                     }
@@ -3114,7 +3114,7 @@ LIB_EXPORT uint32_t CC VdbBlastRunSetGetReadId(const VdbBlastRunSet *self,
                 while (status == eVdbBlastNoErr && ++dot2 < end) {
                     char c = *dot2;
                     if (c < '0' || c > '9') {
-                        S
+                        TRACE();
                         status = eVdbBlastErr;
                         break;
                     }
@@ -3190,7 +3190,7 @@ LIB_EXPORT uint32_t CC VdbBlastRunSetGetReadId(const VdbBlastRunSet *self,
     }
 
     if (status == eVdbBlastNoErr && !found) {
-        S
+        TRACE();
         status = eVdbBlastErr;
     }
 
